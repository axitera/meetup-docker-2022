buildscript {
	ext {
		testContainers = '1.16.3'
		ghProjectUrl = "https://github.com/axitera/meetup-docker-2022"
		ghProjectLabel = "org.opencontainers.image.source"
		isDev = System.properties['env'] == 'dev' // devtools
	}
	repositories { mavenCentral() }

	dependencies {
		classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.6.6'
		classpath 'com.bmuschko:gradle-docker-plugin:7.3.0'
		classpath 'org.springframework:springloaded:1.2.8.RELEASE' // devtools
	}
}
plugins {
	id 'com.google.cloud.tools.jib' version '3.2.1'
	id 'com.bmuschko.docker-spring-boot-application' version '7.3.0'
}

apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: 'idea'
apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin


group 'de.axitera'
version '1.0-SNAPSHOT'

repositories {
	mavenCentral()
}

idea {
	module {
		inheritOutputDirs = false
		outputDir = file("$buildDir/classes/java/main/")
	}
}

bootJar { // additional devtools configuration
	if(isDev) {
		classpath configurations.developmentOnly
	}
}

ext {
	serviceImageName = 'ghcr.io/axitera/meetup-docker-2022/nice-2-meet-u-service'
}

// spring-boot-plugin
bootBuildImage {
	imageName = serviceImageName
}
// spring-boot-plugin

// bmuschko plugin
docker {
	springBootApplication {
		baseImage = 'openjdk:17'
		ports = [8080, 9000]
		images = ["${serviceImageName}:latest"]
		jvmArgs = ['-Dspring.profiles.active=production', '-Xmx2048m']
	}
}
dockerCreateDockerfile {
	label([ghProjectLabel: ghProjectUrl])
}
// bmuschko plugin

// jib
jib {
	to.image = "${serviceImageName}"
	container {
		labels = [ghProjectLabel: ghProjectUrl]
		ports = ["8080", "9000"]
	}
}
// jib

configurations {
	containerTestImplementation.extendsFrom testImplementation
	containerTestRuntimeOnly.extendsFrom testRuntimeOnly
	embeddedTestImplementation.extendsFrom testImplementation
	embeddedTestRuntimeOnly.extendsFrom testRuntimeOnly
}
dependencyManagement {
	imports {
		mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2021.0.1'
	}
}

ext['junit-jupiter.version'] = '5.8.2'

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	developmentOnly("org.springframework.boot:spring-boot-devtools") // devtools
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.postgresql:postgresql'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

	//container
	containerTestImplementation "org.testcontainers:kafka:${testContainers}"
	containerTestImplementation "org.testcontainers:postgresql:${testContainers}"
	containerTestImplementation "org.testcontainers:testcontainers:${testContainers}"
	containerTestImplementation "org.testcontainers:junit-jupiter:${testContainers}"

	//embedded
	embeddedTestImplementation("io.zonky.test:embedded-database-spring-test:2.1.1")
	embeddedTestImplementation("io.zonky.test:embedded-postgres:1.3.1")
	embeddedTestImplementation 'org.springframework.kafka:spring-kafka-test'
}

test {
	useJUnitPlatform()
}

sourceSets {
	containerTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/test-by-container/java')
		}
		resources.srcDir file('src/test-by-container/resources')
	}
}

sourceSets {
	embeddedTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/test-by-embedded/java')
		}
		resources.srcDir file('src/test-by-embedded/resources')
	}
}
task containerTest(type: Test) {
	useJUnitPlatform()
	testClassesDirs = sourceSets.containerTest.output.classesDirs
	classpath = sourceSets.containerTest.runtimeClasspath
	outputs.upToDateWhen { false }

}
task embeddedTest(type: Test) {
	useJUnitPlatform()
	testClassesDirs = sourceSets.embeddedTest.output.classesDirs
	classpath = sourceSets.embeddedTest.runtimeClasspath
	outputs.upToDateWhen { false }
}